model Room {
  id          Int       @id @default(autoincrement())
  number      Int       @unique
  type        RoomType
  status      RoomStatus @default(AVAILABLE)
  price       Float      @default(0) 
  isAvailable Boolean?   @default(true)
  features    Json?
  bookings    Booking[]
  reviews     Review[]
  discounts   RoomDiscount[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([type, status])
}

enum RoomStatus {
  AVAILABLE
  BOOKED
  UNDER_MAINTENANCE
  CLEANING
}

enum RoomType {
  SINGLE
  DOUBLE
  SUITE
  DELUXE
}

model Booking {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  roomId      Int
  room        Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  checkIn     DateTime
  checkOut    DateTime
  totalAmount Float     @default(0)
  status      BookingStatus @default(PENDING)
  services    BookingToService[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  payment     Payment? 

  @@index([userId])
  @@index([roomId, status])
  @@index([checkIn, checkOut])
  @@unique([roomId, checkIn, checkOut])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Service {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Float
  bookings    BookingToService[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([name])
}


model Discount {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  percentage  Float
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean   @default(true)
  rooms       RoomDiscount[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([isActive])
  @@index([startDate, endDate])
}

model RoomDiscount {
  roomId     Int
  discountId Int
  room       Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  discount   Discount   @relation(fields: [discountId], references: [id], onDelete: Cascade)

  @@id([roomId, discountId]) 
  @@map("room_discounts")
}

model BookingToService {
  bookingId Int
  serviceId Int
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([bookingId,serviceId])
  @@map("booking_services")
}