model Room {
  id          Int       @id @default(autoincrement())
  number      Int       @unique
  type        RoomType
  status      RoomStatus @default(AVAILABLE)
  price       Float      @default(0) 
  bookings    Booking[]
  reviews     Review[]

  @@index([type, status])
}

enum RoomStatus {
  AVAILABLE
  BOOKED
  UNDER_MAINTENANCE
  CLEANING
}

enum RoomType {
  SINGLE
  DOUBLE
  DELUXE
  ECONOMY
}

model Booking {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  roomId      Int
  room        Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  checkIn     DateTime
  checkOut    DateTime
  totalAmount Float     @default(0)
  status      BookingStatus @default(PENDING)
  payment     Payment? 
  services    BookingToService[]

  @@index([userId])
  @@index([roomId, status])
  @@index([checkIn, checkOut])
  @@unique([roomId, checkIn, checkOut])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Service {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Float
  bookings    BookingToService[]

  @@index([name])
}

model BookingToService {
  bookingId    Int
  serviceId Int
  booking   Booking    @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([bookingId, serviceId])
  @@map("booking_services")
}