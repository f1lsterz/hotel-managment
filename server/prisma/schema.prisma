generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  name        String?
  password    String
  role        Role
  bookings    Booking[]
  notifications Notification[]
  payments    Payment[]
  reports Report[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  oauthAccounts OAuthAccount[]
}

enum Role {
  ADMIN
  MANAGER
  STAFF
  USER
  GUEST
}

model OAuthAccount {
  id            Int     @id @default(autoincrement())
  provider      String
  providerId    String
  userId        Int
  user          User    @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
}

model Room {
  id          Int       @id @default(autoincrement())
  number      Int       @unique
  type        RoomType
  price       Float
  isAvailable Boolean   @default(true)
  features    Json
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum RoomType {
  SINGLE
  DOUBLE
  SUITE
  DELUXE
}

model Booking {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  roomId      Int
  room        Room      @relation(fields: [roomId], references: [id])
  checkIn     DateTime
  checkOut    DateTime
  totalAmount Float
  status      BookingStatus @default(PENDING)
  services    Service[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  payment     Payment? 
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Service {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Float
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Payment {
  id          Int       @id @default(autoincrement())
  userId      Int      
  user        User      @relation(fields: [userId], references: [id])
  bookingId   Int       @unique
  booking     Booking   @relation(fields: [bookingId], references: [id])
  amount      Float
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  STRIPE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Notification {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  message     String
  type        NotificationType
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
}

enum NotificationType {
  BOOKING
  PAYMENT
  GENERAL
}

model Report {
  id          Int       @id @default(autoincrement())
  type        ReportType
  adminId Int
  admin       User      @relation(fields: [adminId], references: [id])
  content     String
  createdAt   DateTime  @default(now())
}

enum ReportType {
  FINANCIAL
  OCCUPANCY
  GENERAL
}
